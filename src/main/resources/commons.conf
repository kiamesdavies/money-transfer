akka {
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  # stdout-loglevel = "OFF"
  stdout-loglevel = "INFO"
  # loglevel = "OFF"
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = on
  log-dead-letters-during-shutdown = off

  actor {
      serialize-messages = off // verify that messages are serializable

      debug {
        receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
        autoreceive = on // log all special messages like Kill, PoisoffPill etc sent to all actors
        lifecycle = on // log all actor lifecycle events of all actors
        fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
        event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
      }

      serializers {
        kryo = "com.twitter.chill.akka.AkkaSerializer"
      }

      serialization-bindings {
            "io.kiamesdavies.revolut.models.Evt$DepositEvent" = kryo
            "io.kiamesdavies.revolut.models.Evt$WithdrawEvent" = kryo
            "io.kiamesdavies.revolut.models.Evt$TransactionEvent" = kryo
            "io.kiamesdavies.revolut.models.AccountBalance" = kryo
       }
  }


}

akka.persistence.at-least-once-delivery.warn-after-number-of-unconfirmed-attempts = 5

account {
    #number of hours to keep transactions before purging
    hours-to-keep-transactions = 6
    opening-account = 10000
}

http.port = 9099
server.minutes-to-recreate-hanging-transactions = 30

